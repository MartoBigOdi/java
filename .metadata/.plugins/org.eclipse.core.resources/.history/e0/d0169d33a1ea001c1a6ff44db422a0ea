package excep.TDAS;

import ar.edu.ort.tp1.tdas.implementaciones.PilaNodos;
import ar.edu.ort.tp1.tdas.interfaces.Pila;

public class MainPilas {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Pila <String> miPila = new PilaNodos<>();
		Pila <String> miPilaConLimite = new PilaNodos<>(2);
			
		//Muestra una Exception de RunTime porque la Pila esta vacia. Se tiene que tratar con try y catch.
		try {
			String s = miPila.pop();
			System.out.println(s);
			
		} catch (RuntimeException e) {
			System.out.println(e.getMessage());
		}
		
		//Agregamos elementos a la pila
		miPila.push("Marto");
		miPila.push("Pablo");
		miPila.push("Cali");
		
		//Agregamos elementos a la pila con limite
		miPilaConLimite.push("Tini");
		miPilaConLimite.push("Guada");
		
		//Muestra direccion en la memoria
		System.out.println(miPila);
		
		//Saca el ultimo elemento que agregamos
		String s = miPila.pop();
		System.out.println(s);
		
		System.out.println("Mostramos 'Pablo' porque el pop anterior borro de la Pila a 'Cali'");
		
		//Muestra el ultimo que agregamos
		String s2 = miPila.peek();
		System.out.println(s2);
		
		//Saca el ultimo elemento
		String s3 = miPila.pop();
		System.out.println(s3);
		
		//Probamos si esta vacia
		System.out.println(miPila.isEmpty());
		
		/* Probamos si esta llena, pero esto siempre da "false"
		*  Porque no le indicamos limite al momento de crear la Pila.
		*  Pila <String> miPila = new PilaNodos<>(NO LE INDICAMOS LIMITE); 
		*/
		System.out.println(miPila.isFull());
		
		/*
		 * Da True porque le indicamos el limite y le agregamos los valores previo a 
		 * corroborar
		 */
		System.out.println(miPilaConLimite.isFull());
		
	}

}
